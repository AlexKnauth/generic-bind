******** 2013-09-02 ********
- added some optimizations in ~for/common seems to speed things up:
  - eliminate checks for #:when #t
  - dont call final unless needed (ie dont just call an id default)
  - dont call break? unless specified (ie no (lambda _ #f) default)
  - remove spurious call-with-values when there is only 1 accum

previous timings (in drracket):
- ~for*/lists is ~3x slower than for*/lists
- ~for*/vector is ~3x slower than for*/vector

;> (let ([n 200]) (time (for*/lists (l1 l2 l3) ([x (in-range n)] [y (in-range n)] [z (in-range n)]) (values (list x) (list y) (list z)))) (void))
;cpu time: 5632 real time: 5652 gc time: 4912
;> (let ([n 200]) (time (~for*/lists (l1 l2 l3) ([x (in-range n)] [y (in-range n)] [z (in-range n)]) (values (list x) (list y) (list z)))) (void))
;cpu time: 14237 real time: 14283 gc time: 11061
;> (let ([n 200]) (time (for*/vector ([x (in-range n)] [y (in-range n)] [z (in-range n)]) (list x y z))) (void))
;cpu time: 3100 real time: 3111 gc time: 2852
;> (let ([n 200]) (time (for*/vector ([x (in-range n)] [y (in-range n)] [z (in-range n)]) (list x y z))) (void))
;cpu time: 4901 real time: 4919 gc time: 4636
;> (let ([n 200]) (time (~for*/vector ([x (in-range n)] [y (in-range n)] [z (in-range n)]) (list x y z))) (void))
;cpu time: 17621 real time: 17684 gc time: 14373
;> (let ([n 200]) (time (~for*/vector ([x (in-range n)] [y (in-range n)] [z (in-range n)]) (list x y z))) (void))
;cpu time: 16145 real time: 16306 gc time: 12769

new timings (from racket xrepl):
- ~for*/lists went from ~3x slower to ~1.5 slower
- ~for*/vector went from > ~3x slower to < ~3x slower

-> (let ([n 200]) (time (for*/lists (l1 l2 l3) ([x (in-range n)] [y (in-range n)] [z (in-range n)]) (values (list x) (list y) (list z)))) (void))
cpu time: 7541 real time: 7565 gc time: 6949
-> (let ([n 200]) (time (~for*/lists (l1 l2 l3) ([x (in-range n)] [y (in-range n)] [z (in-range n)]) (values (list x) (list y) (list z)))) (void))
cpu time: 10817 real time: 10847 gc time: 8589
-> (let ([n 200]) (time (for*/vector ([x (in-range n)] [y (in-range n)] [z (in-range n)]) (list x y z))) (void))
cpu time: 3216 real time: 3227 gc time: 2988
-> (let ([n 200]) (time (~for*/vector ([x (in-range n)] [y (in-range n)] [z (in-range n)]) (list x y z))) (void))
cpu time: 8840 real time: 8867 gc time: 7428


******** 2013-08-25 ********
common errors and their causes:

** Error: "expected a generic bind instance in: ( ... )"
** Probable cause: 
 Not properly splicing a syntax-splicing-class pattern variable.

** Error: "no #%app transformer" (or other weird errors)
** Probable cause:
 Bad local-expand and you're not catcing the error properly.
